<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="initial-scale=1">
		<link rel="icon" href="favicon.ico">
		<title>Text-Field Calculator</title>
		<link rel="stylesheet" href="main.css">
		<script src="math.js"></script>
		<style>
			html, body, .content {
				height: 100%;
			}

			body {
				margin: 0;
				font-size: 32px;
			}

			.content {
				display: grid;
				grid-template-rows: auto 1fr auto;
			}

			#container {
				overflow: hidden;
			}

			header, footer {
				margin: 10px;
			}
		</style>
	</head>
	<body>
		<div class="content">
			<header>
				<b>Text-Field Calculator</b>
				<a href="Calculator.html">Version 1</a>
			</header>
			<div id="container"></div>

			<footer>
				<a href="https://mathjs.org/docs/index.html#documentation">Documentation</a>
				<a href="https://github.com/samfundev/TextFieldCalculator">Source</a>
			</footer>
		</div>

		<script src="monaco-editor/min/vs/loader.js"></script>
		<script>

			// Difficulty: "Moderate"
			// This is the JavaScript tokenizer that is actually used to highlight
			// all code in the syntax definition editor and the documentation!
			//
			// This definition takes special care to highlight regular
			// expressions correctly, which is convenient when writing
			// syntax highlighter specifications.
			function lang() {
				return {
					// Set defaultToken to invalid to see what you do not tokenize yet
					defaultToken: 'invalid',
					tokenPostfix: '.js',

					keywords: [
						'break', 'case', 'catch', 'class', 'continue', 'const',
						'constructor', 'debugger', 'default', 'delete', 'do', 'else',
						'export', 'extends', 'false', 'finally', 'for', 'from', 'function',
						'get', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'null',
						'return', 'set', 'super', 'switch', 'symbol', 'this', 'throw', 'true',
						'try', 'typeof', 'undefined', 'var', 'void', 'while', 'with', 'yield',
						'async', 'await', 'of'
					],

					typeKeywords: [
						'any', 'boolean', 'number', 'object', 'string', 'undefined'
					],

					operators: [
						'<=', '>=', '==', '!=', '===', '!==', '=>', '+', '-', '**',
						'*', '/', '%', '++', '--', '<<', '</', '>>', '>>>', '&',
						'|', '^', '!', '~', '&&', '||', '?', ':', '=', '+=', '-=',
						'*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=',
						'^=', '@',
					],

					// we include these common regular expressions
					symbols: /[=><!~?:&|+\-*\/\^%]+/,
					escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
					digits: /\d+(_+\d+)*/,
					octaldigits: /[0-7]+(_+[0-7]+)*/,
					binarydigits: /[0-1]+(_+[0-1]+)*/,
					hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,

					regexpctl: /[(){}\[\]\$\^|\-*+?\.]/,
					regexpesc: /\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,

					// The main tokenizer for our languages
					tokenizer: {
						root: [
							[/[{}]/, 'delimiter.bracket'],
							{ include: 'common' }
						],

						common: [
							// identifiers and keywords
							[/[a-z_$][\w$]*/, {
								cases: {
									'@typeKeywords': 'keyword',
									'@keywords': 'keyword',
									'@default': 'identifier'
								}
							}],
							[/[A-Z][\w\$]*/, 'type.identifier'],  // to show class names nicely
							// [/[A-Z][\w\$]*/, 'identifier'],

							// whitespace
							{ include: '@whitespace' },

							// regular expression: ensure it is terminated before beginning (otherwise it is an opeator)
							[/\/(?=([^\\\/]|\\.)+\/([gimsuy]*)(\s*)(\.|;|\/|,|\)|\]|\}|$))/, { token: 'regexp', bracket: '@open', next: '@regexp' }],

							// delimiters and operators
							[/[()\[\]]/, '@brackets'],
							[/[<>](?!@symbols)/, '@brackets'],
							[/@symbols/, {
								cases: {
									'@operators': 'delimiter',
									'@default': ''
								}
							}],

							// numbers
							[/(@digits)[eE]([\-+]?(@digits))?/, 'number.float'],
							[/(@digits)\.(@digits)([eE][\-+]?(@digits))?/, 'number.float'],
							[/0[xX](@hexdigits)/, 'number.hex'],
							[/0[oO]?(@octaldigits)/, 'number.octal'],
							[/0[bB](@binarydigits)/, 'number.binary'],
							[/(@digits)/, 'number'],

							// delimiter: after number because of .\d floats
							[/[;,.]/, 'delimiter'],

							// strings
							[/"([^"\\]|\\.)*$/, 'string.invalid'],  // non-teminated string
							[/'([^'\\]|\\.)*$/, 'string.invalid'],  // non-teminated string
							[/"/, 'string', '@string_double'],
							[/'/, 'string', '@string_single'],
							[/`/, 'string', '@string_backtick'],
						],

						whitespace: [
							[/[ \t\r\n]+/, ''],
							[/\/\*\*(?!\/)/, 'comment.doc', '@jsdoc'],
							[/\/\*/, 'comment', '@comment'],
							[/\/\/.*$/, 'comment'],
						],

						comment: [
							[/[^\/*]+/, 'comment'],
							[/\*\//, 'comment', '@pop'],
							[/[\/*]/, 'comment']
						],

						jsdoc: [
							[/[^\/*]+/, 'comment.doc'],
							[/\*\//, 'comment.doc', '@pop'],
							[/[\/*]/, 'comment.doc']
						],

						// We match regular expression quite precisely
						regexp: [
							[/(\{)(\d+(?:,\d*)?)(\})/, ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control']],
							[/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/, ['regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],
							[/(\()(\?:|\?=|\?!)/, ['regexp.escape.control', 'regexp.escape.control']],
							[/[()]/, 'regexp.escape.control'],
							[/@regexpctl/, 'regexp.escape.control'],
							[/[^\\\/]/, 'regexp'],
							[/@regexpesc/, 'regexp.escape'],
							[/\\\./, 'regexp.invalid'],
							[/(\/)([gimsuy]*)/, [{ token: 'regexp', bracket: '@close', next: '@pop' }, 'keyword.other']],
						],

						regexrange: [
							[/-/, 'regexp.escape.control'],
							[/\^/, 'regexp.invalid'],
							[/@regexpesc/, 'regexp.escape'],
							[/[^\]]/, 'regexp'],
							[/\]/, { token: 'regexp.escape.control', next: '@pop', bracket: '@close' }],
						],

						string_double: [
							[/[^\\"]+/, 'string'],
							[/@escapes/, 'string.escape'],
							[/\\./, 'string.escape.invalid'],
							[/"/, 'string', '@pop']
						],

						string_single: [
							[/[^\\']+/, 'string'],
							[/@escapes/, 'string.escape'],
							[/\\./, 'string.escape.invalid'],
							[/'/, 'string', '@pop']
						],

						string_backtick: [
							[/\$\{/, { token: 'delimiter.bracket', next: '@bracketCounting' }],
							[/[^\\`$]+/, 'string'],
							[/@escapes/, 'string.escape'],
							[/\\./, 'string.escape.invalid'],
							[/`/, 'string', '@pop']
						],

						bracketCounting: [
							[/\{/, 'delimiter.bracket', '@bracketCounting'],
							[/\}/, 'delimiter.bracket', '@pop'],
							{ include: 'common' }
						],
					},
				};
			}


			// https://stackoverflow.com/a/34842797/8213163
			const hashCode = s => s.split('').reduce((a,b) => (((a << 5) - a) + b.charCodeAt(0))|0, 0)

			function prettyPrint(value) {
				if (typeof value === "string") {
					return `"${value}"`;
				} else if (typeof value === "object" && !(Object.getPrototypeOf(value) instanceof Object)) {
					return `{ ${Object.entries(value).map(([key, val]) => `${key}: ${prettyPrint(val)}`).join(", ")} }`
				}

				return value.toString();
			}

			require.config({ paths: { 'vs': 'monaco-editor/min/vs' }});
			require(['vs/editor/editor.main'], function() {
				const baseSuggestions = Object.entries(math)
				.filter(([key, value]) => {
					try {
						math.help(value);
						return true;
					} catch (exception) {
						return false;
					}
				})
				.map(([key, value]) => {
					const doc = math.help(value).doc;

					let count = 1;
					function snippetify(_, before, middle) {
						return `${before}$\{${count++}:${middle}\}`;
					}

					return {
						label: key,
						kind: typeof value == "function" ? monaco.languages.CompletionItemKind.Function : monaco.languages.CompletionItemKind.Constant,
						insertText: typeof value == "function" ? doc.syntax[0].replaceAll(/(\(|, )(.+?)(?=\)|, )/g, snippetify) : key,
						insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
						documentation: doc.description
					}
				});

				monaco.editor.defineTheme('my-theme', {
					base: 'vs-dark',
					theme: 'vs-dark', // Set your desired theme here
					inherit: true,
					rules: [],
					colors: {
						'editor.background': '#5555', // Set your desired background color here
						
					},
				});

				function suggestionAliases(suggestion, aliases)
				{
					return aliases.map(alias => {
						return { label: alias, insertText: alias, ...suggestion };
					})
				}

				// Define math language
				monaco.languages.register({ id: "math" });
				monaco.languages.registerCompletionItemProvider("math", {
					provideCompletionItems: function(model, position) {
						const suggestions = [...baseSuggestions];

						// Add line# suggestions
						for (let i = 1; i < position.lineNumber; i++) {
							const result = lineResults[i - 1];
							if (result == undefined)
								continue;

							suggestions.push(...suggestionAliases(
								{
									kind: monaco.languages.CompletionItemKind.Variable,
									documentation: `The result of line ${i}. (${result})`
								},
								[`line${i}`, `l${i}`]
							));
						}

						// Add previous/answer suggestions
						if (position.lineNumber !== 1)
						{
							const previousResult = lineResults[position.lineNumber - 2];
							if (previousResult != undefined)
							{
								suggestions.push(...suggestionAliases(
									{
										kind: monaco.languages.CompletionItemKind.Variable,
										documentation: `The result of the previous line. (${previousResult})`
									},
									["prev", "previous", "ans", "answer"]
								));
							}
						}

						return {
							suggestions: suggestions
						};
					}
				});
				monaco.languages.setMonarchTokensProvider("math", lang());

				var editor = monaco.editor.create(document.getElementById('container'), {
					language: "math", 
					value: localStorage.getItem("content") ?? "",
					theme: "my-theme",
					mouseWheelZoom: true,
					fontSize: 24,
					wordWrap: "on",
					lineNumbersMinChars: 2,
					fixedOverflowWidgets: true
				}, {
					storageService: {
						get() {},
						getBoolean(key) {
							if (key === "expandSuggestionDocs")
								return true;

							return false;
						},
						getNumber() {},
						store() {},
						onWillSaveState() {},
						onDidChangeStorage() {},
						remove() {}
					}
				});

				// Actions
				editor.addAction({
					id: "replace-result-all",
					label: "Replace Everything with the Result",
					keybindings: [
						monaco.KeyCode.Tab
					],
					precondition: "!inSnippetMode",
					contextMenuGroupId: "1_modification",
					run: function() {
						if (finalResult == null)
							return;

						editor.pushUndoStop();
						editor.executeEdits("replace-result-all", [{
							range: new monaco.Range(1, 1, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER),
							text: finalResult.toString()
						}]);
						editor.setPosition(new monaco.Position(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER));
					}
				});

				editor.addAction({
					id: "replace-result-line",
					label: "Replace Line with it's Result",
					keybindings: [
						monaco.KeyMod.Shift | monaco.KeyCode.Tab
					],
					precondition: "!inSnippetMode",
					contextMenuGroupId: "1_modification",
					run: function() {
						const lineNumber = editor.getPosition().lineNumber;
						const result = lineResults[lineNumber - 1];
						if (result == null)
							return;

						editor.pushUndoStop();
						editor.executeEdits("replace-result-line", [{
							range: new monaco.Range(lineNumber, 1, lineNumber, Number.MAX_SAFE_INTEGER),
							text: result.toString()
						}]);
						editor.setPosition(new monaco.Position(lineNumber, Number.MAX_SAFE_INTEGER));
					}
				});

				editor.addAction({
					id: "insert-result-all",
					label: "Insert a New Line with the Result",
					keybindings: [],
					contextMenuGroupId: "1_modification",
					run: function() {
						const lineNumber = editor.getPosition().lineNumber;
						if (finalResult == null)
							return;

						editor.pushUndoStop();
						editor.executeEdits("insert-result-all", [{
							range: new monaco.Range(lineNumber, Number.MAX_SAFE_INTEGER, lineNumber, Number.MAX_SAFE_INTEGER),
							text: "\n" + finalResult.toString()
						}]);
						editor.setPosition(new monaco.Position(lineNumber, Number.MAX_SAFE_INTEGER));
					}
				});

				editor.addAction({
					id: "insert-result-line",
					label: "Insert a New Line with the Result of the Current Line",
					keybindings: [],
					contextMenuGroupId: "1_modification",
					run: function() {
						const lineNumber = editor.getPosition().lineNumber;
						const result = lineResults[lineNumber - 1];
						if (result == null)
							return;

						editor.pushUndoStop();
						editor.executeEdits("insert-result-line", [{
							range: new monaco.Range(lineNumber, Number.MAX_SAFE_INTEGER, lineNumber, Number.MAX_SAFE_INTEGER),
							text: "\n" + result.toString()
						}]);
						editor.setPosition(new monaco.Position(lineNumber, Number.MAX_SAFE_INTEGER));
					}
				});

				window.editor = editor;

				editor.onDidChangeModelContent((event) => update());
				window.addEventListener("resize", () => {
					editor.layout({ width: window.innerWidth, height: window.innerHeight });
				});

				let decorationKeys = new Set();
				function makeDecoration(key, options) {
					if (!decorationKeys.has(key)) {
						editor._codeEditorService.registerDecorationType("result", key, options);

						decorationKeys.add(key);
					}

					return editor._codeEditorService.resolveDecorationOptions(key, true);
				}

				math.config({
					number: "BigNumber",
					precision: 32
				});

				// Extra functions
				math.import({
					divmod: (x, n) => math.matrix([Math.floor(x / n), x % n])
				});

				let lineResults = [];
				let finalResult;

				let oldDecorations = [];
				function update() {
					const parser = math.parser();
					const decorators = [];
					const usedKeys = new Set();
					const markers = [];

					lineResults = [];

					// Split by expression
					const messages = [
						"Unexpected end of expression",
						"Parenthesis ) expected",
						"End of matrix ] expected"
					];

					const lines = editor.getValue().split("\n");
					for (let [index, line] of lines.entries()) {
						if (index === lines.length - 1) continue;

						try {
							math.parse(line);
						} catch (exception) {
							if (messages.some(message => exception.message.startsWith(message))) {
								lines[index] = "";
								lines[index + 1] = line.replace(/#.+/g, "") + lines[index + 1];
							}
						}
					}

					// Parse each line of math
					for (let [index, line] of lines.entries()) {
						let result;
						try {
							result = parser.evaluate(line.trim());
						} catch (exception) {
							// Add any exceptions as markers
							markers.push({
								message: exception.message,
								startColumn: exception.char ?? 1,
								endColumn: exception.char ?? Number.MAX_SAFE_INTEGER,
								startLineNumber: index + 1,
								endLineNumber: index + 1
							});
							continue;
						}

						if (result == undefined || typeof result == "function")
							continue;

						result = prettyPrint(result);

						lineResults[index] = result;

						// Result of this line
						parser.set(`l${index + 1}`, result);
						parser.set(`line${index + 1}`, result);

						// Result of the previous line
						parser.set("prev", result);
						parser.set("previous", result);
						parser.set("ans", result);
						parser.set("answer", result);

						// Add any results are decorators.
						const key = hashCode(result.toString());
						decorators.push({ range: new monaco.Range(index + 1, Number.MAX_SAFE_INTEGER, index + 1, Number.MAX_SAFE_INTEGER), options: makeDecoration(key, {
							after: {
								color: "#444444",
								margin: "0 0 0 1em",
								textDecoration: "none",
								contentText: result.toString()
							}
						})});

						usedKeys.add(key);
					}

					try {
						finalResult = parser.evaluate(editor.getValue());
					} catch (exception) {
					}

					// Delta the new decorators
					oldDecorations = editor.deltaDecorations(oldDecorations, decorators);

					// Cleanup old keys
					for (const key of decorationKeys) {
						if (!usedKeys.has(key)) {
							editor._codeEditorService.removeDecorationType(key);
							decorationKeys.delete(key);
						}
					}

					// Set markers
					monaco.editor.setModelMarkers(editor.getModel(), "math", markers);

					// Put text in localStorage to persist data
					localStorage.setItem("content", editor.getValue());
				}

				update();
			});
		</script>
	</body>
</html>